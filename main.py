# """
# main.py ‚Äî stateless runner for Content-Studio
# ‚Ä¢ Sessions live only in RAM (InMemorySessionService)  
# ‚Ä¢ Artifacts are still persisted (GCS if bucket set, otherwise in-memory)
# """

# import asyncio, os
# from dotenv import load_dotenv

# from google.adk.runners   import Runner
# from google.adk.sessions  import InMemorySessionService              # ‚Üê NEW
# from google.adk.artifacts import InMemoryArtifactService, GcsArtifactService

# from Content_Studio.agent import root_agent
# from utils import call_agent_async

# load_dotenv()

# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# # 1.  Session service ‚Äë- in-memory, wiped when the app exits
# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# session_service = InMemorySessionService()            # sessions are *not* saved to disk[12]

# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# # 2.  Artifact service  (GCS ‚Üí if bucket set, else in-memory)
# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# gcs_bucket = os.getenv("GCS_ARTIFACT_BUCKET")
# if gcs_bucket:
#     artifact_service = GcsArtifactService(bucket_name=gcs_bucket)
#     print(f"‚úÖ Using GCS bucket ‚Äú{gcs_bucket}‚Äù for artifact storage")
# else:
#     artifact_service = InMemoryArtifactService()
#     print("‚ö†Ô∏è  No GCS bucket configured ‚Äî falling back to in-memory artifacts")

# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# # 3.  Main event loop
# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# async def main_async() -> None:
#     APP_NAME  = "Content-Studio"
#     USER_ID   = "Company_Strategist"

#     # Always start a fresh session ‚Äî no DB lookup / resume
#     session = await session_service.create_session(
#         app_name = APP_NAME,
#         user_id  = USER_ID,
#         state    = {}                                   # empty initial state[11]
#     )
#     SESSION_ID = session.id
#     print(f"üîÑ  New ephemeral session: {SESSION_ID}")

#     runner = Runner(
#         agent            = root_agent,
#         app_name         = APP_NAME,
#         session_service  = session_service,
#         artifact_service = artifact_service            # image artifacts still work
#     )

#     print("\nWelcome to Content-Studio!  (type 'exit' to quit)\n")
#     while True:
#         user_input = input("You: ")
#         if user_input.lower() in {"exit", "quit"}:
#             print("üëã  Goodbye.")
#             break
#         await call_agent_async(runner, USER_ID, SESSION_ID, user_input)


# if __name__ == "__main__":
#     asyncio.run(main_async())

"""
main.py √¢‚Ç¨‚Äù stateless runner for Content-Studio
√¢‚Ç¨¬¢ Sessions live only in RAM (InMemorySessionService)  
√¢‚Ç¨¬¢ Artifacts are still persisted (GCS if bucket set, otherwise in-memory)
"""

import asyncio, os
from dotenv import load_dotenv

from google.adk.runners   import Runner
from google.adk.sessions  import InMemorySessionService              # √¢‚Ä†¬ê NEW
from google.adk.artifacts import InMemoryArtifactService, GcsArtifactService

from Content_Studio.agent import root_agent
from utils import call_agent_async

load_dotenv()

# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
#  Setup for Streamlit UI integration
# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
USER_ID = "Company_Strategist"
APP_NAME = "Content-Studio"
SESSION_ID = None
runner = None

def init_ui_runner():
    global SESSION_ID, runner
    # Create a fresh session for UI
    session = asyncio.run(session_service.create_session(
        app_name=APP_NAME,
        user_id=USER_ID,
        state={}
    ))
    SESSION_ID = session.id
    runner = Runner(
        agent=root_agent,
        app_name=APP_NAME,
        session_service=session_service,
        artifact_service=artifact_service
    )
session_service = InMemorySessionService() 
# Initialize the runner at import time for UI

# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
# 1.  Session service √¢‚Ç¨‚Äò- in-memory, wiped when the app exits
# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
           # sessions are *not* saved to disk[12]

# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
# 2.  Artifact service  (GCS √¢‚Ä†‚Äô if bucket set, else in-memory)
# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
gcs_bucket = os.getenv("GCS_ARTIFACT_BUCKET")
if gcs_bucket:
    artifact_service = GcsArtifactService(bucket_name=gcs_bucket)
    print(f"√¢≈ì‚Ä¶ Using GCS bucket √¢‚Ç¨≈ì{gcs_bucket}√¢‚Ç¨¬ù for artifact storage")
else:
    artifact_service = InMemoryArtifactService()
    print("√¢≈° √Ø¬∏¬è  No GCS bucket configured √¢‚Ç¨‚Äù falling back to in-memory artifacts")

# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
# 3.  Main event loop
init_ui_runner()

# √¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨√¢‚Äù‚Ç¨
async def main_async() -> None:
    APP_NAME  = "Content-Studio"
    USER_ID   = "Company_Strategist"

    # Always start a fresh session √¢‚Ç¨‚Äù no DB lookup / resume
    session = await session_service.create_session(
        app_name = APP_NAME,
        user_id  = USER_ID,
        state    = {}                                   # empty initial state[11]
    )
    SESSION_ID = session.id
    print(f"√∞≈∏‚Äù‚Äû  New ephemeral session: {SESSION_ID}")

    runner = Runner(
        agent            = root_agent,
        app_name         = APP_NAME,
        session_service  = session_service,
        artifact_service = artifact_service            # image artifacts still work
    )

    print("\nWelcome to Content-Studio!  (type 'exit' to quit)\n")
    while True:
        user_input = input("You: ")
        if user_input.lower() in {"exit", "quit"}:
            print("√∞≈∏‚Äò‚Äπ  Goodbye.")
            break
        await call_agent_async(runner, USER_ID, SESSION_ID, user_input)


if __name__ == "__main__":
    asyncio.run(main_async())
